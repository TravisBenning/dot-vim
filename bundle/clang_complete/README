This plugin use clang for accurately completing C and C++ code.

How-to use it? Simply put it on ~/.vim/plugin
It should work immediately.

Configuration:
  - g:clang_complete_auto:
       if equal to 1, automatically complete after ->, ., ::
       Default: 1

  - g:clang_complete_copen:
       if equal to 1, open quickfix window on error.
       Default: 0

  - g:clang_hl_errors:
       if equal to 1, it will highlight the warnings and errors the
       same way clang does it.
       Default: 1

  - g:clang_periodic_quickfix:
       if equal to 1, it will periodically update the quickfix window
       Note: You could use the g:ClangUpdateQuickFix() to do the same
             with a mapping.
       Default: 0

  - g:clang_snippets:
       if equal to 1, it will do some snippets magic after a ( or a ,
       inside function call. Not currently fully working.
       Default: 0

   - g:clang_conceal_snippets:
        if equal to 1, vim will use vim 7.3 conceal feature to hide <#
        and #> which delimit a snippets.
        Note: See concealcursor and conceallevel for conceal configuration.
        Default: 1 (0 if conceal not available)


Thanks to:
    Xaizek

Note:
 - This plugin is incompatible with omnicppcomplete due to the
 unconditionnaly set mapping done by omnicppcomplete. So don't forget to
 suppress it before using this plugin.

 - If you find that completion is slow, please read the PCH section
 below.

 - You're free to use it, to distribute it, but please, don't modify it
 privately, others can be interested by your work. If you have a patch
 or a bug or a feature request, mail me.

PCH:
A PreCompiled Header file is a way to accelerate compilation, and so,
may accelerate the completion. Here is how to create the <vector> pch,
on linux (OSX users may use -fnext-runtime instead of -fgnu-runtime):

clang -x c++-header /path/to/c++/vector -fno-exceptions -fgnu-runtime -o vector.pch
You just have to insert it into your .clang_complete:
echo '-include-pch /path/to/vector.pch -fgnu-runtime' >> .clang_complete

One of the major problem is that you cannot include more that one pch,
the solution is to put the system headers or non changing headers
into another header and then compile it to pch:

echo '#include <iostream>\n#include <vector>' > pchheader.h
clang -x c++-header ./pchheader.h -fno-exceptions -fnu-runtime -o ./pchheader.pch
And then add it to the .clang_complete file.

Known Issues:
 - If clang is not able to compile your file, it cannot complete
 anything. Since clang is not supporting every C++0x features, this is
 normal if it can do any completion on C++0x file.
